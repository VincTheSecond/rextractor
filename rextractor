#!/usr/bin/perl

use strict;
use warnings;
use POSIX;

use RExtractor::Tools;
use RExtractor::API;

if (!scalar(@ARGV)) {
    print STDERR "Use ./rextractor help for list of available commands.\n";
    exit 1;
}

# Parse command-line parameters
my $COMMAND = shift(@ARGV);

# Check command-line parameters
if ($COMMAND =~ /(?:document-(?:state|delete)|content-(?:html|relations))/ and scalar(@ARGV) != 1) {
    print STDERR "Use ./rextractor help for list of available commands.\n";
    exit 1;
}
if ($COMMAND =~ /(?:document-submit|content-(?:chunks))/ and scalar(@ARGV) != 2) {
    print STDERR "Use ./rextractor help for list of available commands.\n";
    exit 1;
}
if ($COMMAND =~ /(?:list-(?:all|submit|convert|nlp|entity|relation|export))/ and scalar(@ARGV) != 4) {
    print STDERR "Use ./rextractor help for list of available commands.\n";
    exit 1;
}

## Help
if ($COMMAND eq "help") {
    print STDERR "usage: ./rextractor <command> <parameters>\n\n";
    print STDERR "The most commonly used rextractor commands are:\n";
    print STDERR "   server-start\n";
    print STDERR "      Start all RExtractor daemons.\n\n";
    print STDERR "   server-stop\n";
    print STDERR "      Stop all RExtractor daemons.\n\n";
    print STDERR "   server-state\n";
    print STDERR "      Print current state of each daemon.\n\n";
    print STDERR "   document-state <document ID>\n";
    print STDERR "      Print current state of given document ID.\n\n";
    print STDERR "   document-submit <strategy> <path to file>\n";
    print STDERR "      Submit given filne into RExtractor.\n\n";
    print STDERR "   document-delete <document ID>\n";
    print STDERR "      Delete given document from RExtractor system.\n\n";
    print STDERR "   content-html <document ID>\n";
    print STDERR "      Return document with marked text-chunks for HTML presentation.\n\n";
    print STDERR "   content-chunks <document ID> <chunk ID>\n";
    print STDERR "      Return details about given chunk ID.\n\n";
    print STDERR "   content-relations <document ID>\n";
    print STDERR "      Return table of relations detected in the document.\n\n";
    print STDERR "   list-submit <fromDate|NO> <toDate|NO> <fromDateTime|NO> <toDateTime|NO>\n";
    print STDERR "      Return list of submitted documents in given time (if specified).\n\n";
    print STDERR "   list-convert <fromDate|NO> <toDate|NO> <fromDateTime|NO> <toDateTime|NO>\n";
    print STDERR "      Return list of converted documents in given time (if specified).\n\n";
    print STDERR "   list-nlp <fromDate|NO> <toDate|NO> <fromDateTime|NO> <toDateTime|NO>\n";
    print STDERR "      Return list of documents processed by NLP tools in given time (if specified).\n\n";
    print STDERR "   list-entity <fromDate|NO> <toDate|NO> <fromDateTime|NO> <toDateTime|NO>\n";
    print STDERR "      Return list of documents with detected entities in given time (if specified).\n\n";
    print STDERR "   list-relation <fromDate|NO> <toDate|NO> <fromDateTime|NO> <toDateTime|NO>\n";
    print STDERR "      Return list of documents with detected relations in given time (if specified).\n\n";
    print STDERR "   list-export <fromDate|NO> <toDate|NO> <fromDateTime|NO> <toDateTime|NO>\n";
    print STDERR "      Return list of exported documents in given time (if specified).\n\n";
    print STDERR "   list-all <start> <limit> <order_by> <order_dir>\n";
    print STDERR "      <order_by> could be {id, status, ctime}\n";
    print STDERR "      <order_dir> could be {ASC, DESC}\n";
    print STDERR "      Return list of submitted documents from given start offset and number of results.\n\n";
}


## A.1 SERVER START
## Start each RExtractor daemon
if ($COMMAND eq "server-start") {
    RExtractor::API::a1_server_start();

    $COMMAND = "server-state";
    sleep(2);
}

## A.2 SERVER STOP
## Send terminating signal to each RExtractor daemon.
if ($COMMAND eq "server-stop") {
    RExtractor::API::a2_server_stop();

    $COMMAND = "server-state";
    sleep(2);
}

## A.3 SERVER STATE
## For each component server return state (on/off)
if ($COMMAND eq "server-state") {
    my @output = RExtractor::API::a3_server_state();
    print STDERR join("", @output);

    my $existing_off = scalar(grep(/OFF/, @output)) ? 1 : 0;
    exit $existing_off;
}

## B.1 DOCUMENT STATE
## Returns document state number and message.
## Returns submition time (YYYY-MM-DD HH:MM:SS).
if ($COMMAND eq "document-state") {
    # Check parameter
    my $doc_id = shift(@ARGV);
    my $output = RExtractor::API::b1_document_state($doc_id);

    print STDERR $output;
    exit $output =~ /ERROR/ ? 1 : 0;
}

## B.2 SUBMIT NEW DOCUMENT
## Filename of the document is the second parameter of the command-line
if ($COMMAND eq "document-submit") {
    # Check parameter
    my $strategy = shift(@ARGV);
    my $filename = shift(@ARGV);
    my $output = RExtractor::API::b2_document_submit($strategy, undef, undef, $filename);

    print STDERR $output;
    exit $output =~ /ERROR/ ? 1 : 0;
}

## B.3 DOCUMENT DELETE
## Removes document from the system
if ($COMMAND eq "document-delete") {
    my $doc_id = shift(@ARGV);
    my $output = RExtractor::API::b3_document_delete($doc_id);

    print STDERR $output;
    exit $output =~ /ERROR/ ? 1 : 0;
}

## C.1 CONTENT HTML
## Returns HTML version of document with chunks annotated by <span> tags
if ($COMMAND eq "content-html") {
    my $doc_id = shift(@ARGV);
    my $output = RExtractor::API::c1_content_html($doc_id);

    binmode(STDOUT, ":encoding(utf8)");
    print STDOUT $output;
    exit $output =~ /ERROR/ ? 1 : 0;
}

## C.2 CONTENT CHUNKS
## Return data about specified chunk
if ($COMMAND eq "content-chunks") {
    my $doc_id = shift(@ARGV);
    my $chunk_id = shift(@ARGV);
    my $output = RExtractor::API::c2_content_chunks($doc_id, $chunk_id);

    binmode(STDOUT, ":encoding(utf8)");
    print $output;
    exit $output =~ /ERROR/ ? 1 : 0;
}

## C.3 CONTENT RELATIONS
## Returns extracted relations
if ($COMMAND eq "content-relations") {
    my $doc_id = shift(@ARGV);
    my $output = RExtractor::API::c3_content_relations($doc_id);

    binmode(STDOUT, ":encoding(utf8)");
    print $output;
    exit $output =~ /ERROR/ ? 1 : 0;
}

## E LIST OF FILES
## Returns list of ids of document which were processed by specified component
if ($COMMAND =~ /^list-(submit|convert|nlp|entity|relation|export)$/) {
    my $fromDate = shift(@ARGV);
    my $toDate = shift(@ARGV);
    my $fromDateTime = shift(@ARGV);
    my $toDateTime = shift(@ARGV);

    $fromDate = $fromDate eq "NO" ? undef : $fromDate;
    $toDate = $toDate eq "NO" ? undef : $toDate;
    $fromDateTime = $fromDateTime eq "NO" ? undef : $fromDateTime;
    $toDateTime = $toDateTime eq "NO" ? undef : $toDateTime;

    my $output = RExtractor::API::e_list($COMMAND, $fromDate, $toDate, $fromDateTime, $toDateTime);
    print $output;
    exit $output =~ /ERROR/ ? 1 : 0;
}

## E.7 LIST ALL
## Returns details about each submitted document
if ($COMMAND eq "list-all") {
    my $start = shift(@ARGV);
    my $limit = shift(@ARGV);
    my $order_by = shift(@ARGV);
    my $order_dir = shift(@ARGV);

    my $output = RExtractor::API::e7_list_all($start, $limit, $order_by, $order_dir);
    print $output;
    exit $output =~ /ERROR/ ? 1 : 0;
}
